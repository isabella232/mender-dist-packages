image: docker:git

variables:
  # Packages versions
  MENDER_VERSION: "master"
  MENDER_SHELL_VERSION: "master"
  # Bucket name
  S3_BUCKET_NAME: "mender"
  # Legacy path for mender-client: <version>/$S3_BUCKET_SUBPATH/...
  S3_BUCKET_SUBPATH: "dist-packages/debian"
  # APT repo path
  S3_BUCKET_REPO_PATH: "repos/debian"
  # Set to true to skip tests (i.e. old Mender client build). See QA-123
  SKIP_TESTS: "false"
  # Update the 'latest' debian alias to a new client release
  PUBLISH_LATEST_CLIENT_PACKAGE: "false"
  # GPG keys for build and distribution, to be set by CI/CD variables
  GPG_PRIV_KEY_BUILD: ""
  GPG_PUB_KEY_BUILD: ""
  GPG_PRIV_KEY_DIST: ""

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

stages:
  - build
  - test
  - publish

build:
  stage: build
  services:
    - docker:dind
  before_script:
    - apk --update --no-cache add bash sudo
  script:
    # GPG key is available only in protected branches
    - if [ "$GPG_PRIV_KEY_BUILD" != "" ]; then
    -   MENDER_VERSION=$MENDER_VERSION
        MENDER_SHELL_VERSION=$MENDER_SHELL_VERSION
        GPG_KEY_BUILD="$GPG_PRIV_KEY_BUILD"
        ./docker-mender-dist-packages
    - else
    -   MENDER_VERSION=$MENDER_VERSION
        MENDER_SHELL_VERSION=$MENDER_SHELL_VERSION
        ./docker-mender-dist-packages
    - fi
  artifacts:
    paths:
      - output/*

test:acceptance:
  except:
    variables:
      - $SKIP_TESTS == "true"
  stage: test
  image: docker:18-dind
  tags:
    - mender-qa-slave
  dependencies:
    - build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - /usr/local/bin/dockerd-entrypoint.sh &
    - sleep 10
    - export DOCKER_HOST="unix:///var/run/docker.sock"
    - docker version
    - apk --update --no-cache add git
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - apk --update --no-cache add python3 gcc openssh make openssl-dev libffi-dev libc-dev python3-dev
    - cd tests
    - pip3 install --upgrade -r requirements.txt
    - deb_version=$(cat ${CI_PROJECT_DIR}/output/mender-client-deb-version)
    - python3 -m pytest -v --mender-client-version $MENDER_VERSION --mender-client-deb-version $deb_version

publish:s3:apt-repo:
  stage: publish
  only:
    - master
  image: debian:buster
  dependencies:
    - build
  before_script:
    - apt update && apt install -yyq reprepro awscli
    # Check and import GPG keys
    - if [ -z "$GPG_PRIV_KEY_DIST" -o -z "$GPG_PUB_KEY_BUILD" ]; then
    -   echo "Error. GPG keys not available"
    -   exit 1
    - fi
    - echo "$GPG_PRIV_KEY_DIST" | gpg --import
    - echo "$GPG_PUB_KEY_BUILD" | gpg --import
    # Prepare repo from two S3 buckets
    - mkdir repo
    - cd repo
    # TODO: use a different bucket?
    # - export AWS_ACCESS_KEY_ID=$REPO_PRIVATE_AWS_ACCESS_KEY_ID
    # - export AWS_SECRET_ACCESS_KEY=$REPO_PRIVATE_AWS_SECRET_ACCESS_KEY
    - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/conf conf
    - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/db db
    # TODO: use a different bucket?
    # - export AWS_ACCESS_KEY_ID=$REPO_PUBLIC_AWS_ACCESS_KEY_ID
    # - export AWS_SECRET_ACCESS_KEY=$REPO_PUBLIC_AWS_SECRET_ACCESS_KEY
    - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/dists dists
    - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/pool pool
  script:
    # Include the build packages in stable or experimental
    - for change_file in $(ls ${CI_PROJECT_DIR}/output/*.changes); do
    -   reprepro include stable $change_file ||
        reprepro include experimental $change_file
    - done
    # Upload to bucket
    # TODO: use a different bucket?
    # - export AWS_ACCESS_KEY_ID=$REPO_PRIVATE_AWS_ACCESS_KEY_ID
    # - export AWS_SECRET_ACCESS_KEY=$REPO_PRIVATE_AWS_SECRET_ACCESS_KEY
    - aws s3 sync db s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/db
    # TODO: use a different bucket?
    # - export AWS_ACCESS_KEY_ID=$REPO_PUBLIC_AWS_ACCESS_KEY_ID
    # - export AWS_SECRET_ACCESS_KEY=$REPO_PUBLIC_AWS_SECRET_ACCESS_KEY
    - aws s3 sync pool s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/pool
    - aws s3 ls --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/pool/ |
      awk '{cmd="aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key "$4; system(cmd)}'
    - aws s3 sync dists s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/dists
    - aws s3 ls --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/dists/ |
      awk '{cmd="aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key "$4; system(cmd)}'

publish:s3:legacy:mender-client:
  stage: publish
  image: debian:buster
  dependencies:
    - build
  before_script:
    - apt update && apt install -yyq awscli
    - deb_version=$(cat output/mender-client-deb-version)
  script:
    - echo "Publishing ${MENDER_VERSION} packages to S3"
    # For master packages, the Debian version is "0.0~git[iso-date].[git-hash]-1" and we make a copy named "master" for GUI to use
    - for arch in amd64 arm64 armhf; do
        aws s3 cp output/mender-client_${deb_version}_${arch}.deb
          s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
        aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
          --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
        if [ "${MENDER_VERSION}" == "master" ]; then
          aws s3 cp output/mender-client_${deb_version}_${arch}.deb
            s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1_${arch}.deb;
          aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
            --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1_${arch}.deb;
        fi;
      done
  only:
    - master

publish:s3:legacy:mender-client:latest:
  extends: publish:s3:legacy:mender-client
  only:
    variables:
      - $PUBLISH_LATEST_CLIENT_PACKAGE == "true"
  script:
    - echo "Publishing latest packages to S3"
    - for arch in amd64 arm64 armhf; do
        aws s3 cp output/mender-client_${deb_version}_${arch}.deb
          s3://${S3_BUCKET_NAME}/latest/${S3_BUCKET_SUBPATH}/${arch}/mender-client_latest_${arch}.deb;
        aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
          --key latest/${S3_BUCKET_SUBPATH}/${arch}/mender-client_latest_${arch}.deb;
      done
