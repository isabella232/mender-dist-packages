#!/bin/bash

set -ex

show_help_and_exit() {
  cat << EOF

Usage: $0 deb-package repo-url version

NOTE: The script expects an /output directory where to store the generated packages. If
running it from a container, create a volume for such directory

EOF
  exit 1
}

verify_output_directory_exists() {
  if [ ! -d "/output" ]; then
    echo "Error: /output directory doesn't exist"
    show_help_and_exit
  fi
}

verify_script_arguments() {
  if [ $# -ne 3 ]; then
    show_help_and_exit
  fi
  DEB_PACKAGE=$1
  REPO_URL=$2
  VERSION=$3
}

checkout_repo() {
  go get -d $REPO_URL
  cd /root/go/src/$REPO_URL
  git checkout $VERSION
}

get_deb_version() {
  # Create a version from VCS. For master, generate something like 0.0~git20191022.dade697
  DEB_VERSION=$(git describe --tags --exact-match 2>/dev/null || git log -1 --pretty=0.0~git%cd.%h --date format:%Y%m%d)-1
}

prepare_recipe() {
  # Select the correct Debian recipe according to the minor version of Mender
  local debian_recipe="debian-master";
  if echo $DEB_VERSION | egrep '^[0-9]+\.[0-9]+\.[0-9](b[0-9]+)?(-build[0-9]+)?-1$'; then
    branch=$(echo $DEB_VERSION | sed -E 's/\.[^.]+$/.x/')
    if [ -d "debian-${branch}" ]; then
      debian_recipe="debian-${branch}"
    fi
  fi
  cp -r /recipes/${DEB_PACKAGE}/${debian_recipe} debian

  # Copy systemd service file
  if [ ${DEB_PACKAGE} = "mender-client" ]; then
    if [ ${debian_recipe} = "debian-2.1.x" ]; then
      # Skip for 2.1.x, special handling in debian/rules
      true
    else
      cp support/mender-client.service debian/mender-client.service ||
      cp support/mender.service debian/mender-client.service
    fi
  elif [ ${DEB_PACKAGE} = "mender-shell" ]; then
    cp support/mender-shell.service debian/
  fi

  distribution=""
  if [ ${debian_recipe} = "debian-master" ]; then
    distribution="experimental"
  else
    distribution="stable"
  fi
  dch --create \
    --newversion ${DEB_VERSION} \
    --distribution ${distribution} \
    --package ${DEB_PACKAGE} \
    "Release ${DEB_VERSION}. See online docs for complete changelog"
}

build_packages() {
  # For PRs and other development branches, we don't have GPG key
  sign_flags=""
  if [ "$(gpg --list-keys)" == "" ]; then
    sign_flags="--unsigned-source --unsigned-changes"
  else
    key_id=$(gpg --list-keys --with-colons| awk -F: '/^pub:/ { print $5 }')
    sign_flags="--sign-key=$key_id"
  fi

  # Native build (amd64)
  dpkg-buildpackage \
    ${sign_flags} \
    --build=binary

  # ARM 32bit build (custom toolchain to support ARMv6)
  CROSS_COMPILE="arm-buildroot-linux-gnueabihf" \
               CC="$CROSS_COMPILE-gcc" \
               PATH="$PATH:/armv6-eabihf--glibc--stable-2018.11-1/bin" \
               CGO_CFLAGS="-I/usr/include/arm-linux-gnueabihf/ -idirafter /usr/include/" \
               CGO_LDFLAGS="-L/usr/lib/arm-linux-gnueabihf/" \
               GOARCH=arm \
               GOARM=6 \
               dpkg-buildpackage -aarmhf \
               ${sign_flags} \
               --build=binary

  # ARM 64bit build (Debian toolchain)
  CROSS_COMPILE="aarch64-linux-gnu" \
               CC="$CROSS_COMPILE-gcc" \
               GOARCH=arm64 \
               dpkg-buildpackage -aarm64 \
               ${sign_flags} \
               --build=binary
}

copy_packages_to_output() {
  # Copy package files to /output
  for file in $(find ../ -maxdepth 1 -type f); do
    cp ${file} /output
  done
  # Echo the package version to /output
  echo ${DEB_VERSION} > /output/mender-client-deb-version
}


##############
# Run script #
##############

verify_output_directory_exists

verify_script_arguments "$@"

checkout_repo

get_deb_version

prepare_recipe

build_packages

copy_packages_to_output
